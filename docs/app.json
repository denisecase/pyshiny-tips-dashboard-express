[{"name": "app.py", "content": "# COMPATIBILITY ISSUES:\n# Plotly's px.scatter function uses statsmodels for lowess trendlines under the hood.\n# Which won't work when hosting on GitHub Pages, so we'll comment it out.\n\n# IMPORT the packages we need (or might want to use) first.\n# NOTE: Each package should be added to requirements.txt,\n#       so the packages can be INSTALLED into the project virtual environment.\n\nimport faicons as fa  # For using font awesome in cards\nimport pandas as pd  # Pandas for data manipulation, required by plotly.express\nimport plotly.express as px  # Plotly Express for making Plotly plots\nfrom shinywidgets import render_plotly  # For rendering Plotly plots\nfrom shiny import reactive, render, req  # To define reactive calculations\nfrom shiny.express import input, ui  # To define the user interface\n\n# ALWAYS familiarize yourself with the data you are working with first.\n# Column names for the tips dataset include:\n# - total_bill: the bill amount (dollars)\n# - tip: the tip amount (dollars)\n# - sex: Male or Female\n# - smoker: Yes or No\n# - day: Day of the week\n# - time: Lunch or Dinner\n# - size: Size of the party\n\n# Load data into a pandas DataFrame\n# Use the tips dataset from Plotly Express\ntips_df = px.data.tips()\n\n# Compute static values\nbill_range_tuple = (min(tips_df.total_bill), max(tips_df.total_bill))\n\n# Define the Shiny UI Page layout\n# Call the ui.page_opts() function to set the page title and make the page fillable\nui.page_opts(title=\"PyShiny Express: Restaurant Tipping Example\", fillable=True)\n\n# Add a Shiny UI sidebar for user interaction\n# Use the ui.sidebar() function to create a sidebar\n# Set the open parameter to \"open\" to make the sidebar open by default\n# Use a with block to add content to the sidebar\n# Using Shiny Express there are no punctuation between ui elements\n# Use the ui.h2() function to add a 2nd level header to the sidebar\n#   pass in a string argument (in quotes) to set the header text\n# Use the ui.input_slider() function to add a slider to the sidebar\n#   pass in a string argument (in quotes) to set the input label\n#   pass in a string argument (in quotes) to set the input label\n#   pass in a tuple argument to set the minimum and maximum values\n#   pass in a string argument (in quotes) to set the prefix\n# Use the ui.input_checkbox_group() function to add a checkbox group to the sidebar\n#   pass in a string argument (in quotes) to set the input label\n#   pass in a list argument to set the input options\n#   pass in a list argument to set the selected options\n#   pass in a boolean argument to set the inline option\n# Use the ui.input_action_button() function to add an action button to the sidebar\n#   pass in a string argument (in quotes) to set the button label\n# Use the ui.hr() function to add a horizontal rule to the sidebar\n# Use the ui.h6() function to add a 6th level header to the sidebar\n#   pass in a string argument (in quotes) to set the header text\n# Use ui.a() to add a hyperlink to the sidebar\n#   pass in two arguments:\n#   the text for the hyperlink (in quotes)\n#   the URL for the hyperlink (in quotes)\n#   set the target parameter to \"_blank\" to open the link in a new tab\n# When passing in multiple arguments to a function, separate them with commas.\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Sidebar\")\n\n    ui.input_slider(\n        \"selected_range_total_bill\",\n        \"Bill amount\",\n        min=bill_range_tuple[0],\n        max=bill_range_tuple[1],\n        value=bill_range_tuple,\n        pre=\"$\",\n    )\n\n    ui.input_checkbox_group(\n        \"selected_time_category\",\n        \"Food service\",\n        [\"Lunch\", \"Dinner\"],\n        selected=[\"Lunch\", \"Dinner\"],\n        inline=True,\n    )\n\n    ui.input_action_button(\"reset_event\", \"Reset filter\")\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/denisecase/pyshiny-tips-dashboard-express\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://denisecase.github.io/pyshiny-tips-dashboard-express/\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"hhttps://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"See the Code\",\n        href=\"https://shiny.posit.co/py/docs/user-interfaces.html#all-together-now\",\n        target=\"_blank\",\n    )\n\n# Add main content\nICONS = {\n    \"user\": fa.icon_svg(\"user\", \"regular\"),\n    \"wallet\": fa.icon_svg(\"wallet\"),\n    \"currency-dollar\": fa.icon_svg(\"dollar-sign\"),\n    \"gear\": fa.icon_svg(\"gear\"),\n}\n\n# Value boxes\nwith ui.layout_columns(fill=False):\n\n    with ui.value_box(showcase=ICONS[\"user\"]):\n        \"Total tippers\"\n\n        @render.express\n        def total_tippers():\n            filtered_data().shape[0]\n\n    with ui.value_box(showcase=ICONS[\"wallet\"]):\n        \"Average tip\"\n\n        @render.express\n        def average_tip():\n            d = filtered_data()\n            if d.shape[0] > 0:\n                perc = d.tip / d.total_bill\n                f\"{perc.mean():.1%}\"\n\n    with ui.value_box(showcase=ICONS[\"currency-dollar\"]):\n        \"Average bill\"\n\n        @render.express\n        def average_bill():\n            d = filtered_data()\n            if d.shape[0] > 0:\n                bill = d.total_bill.mean()\n                f\"${bill:.2f}\"\n\n\n# Tables and charts\nwith ui.layout_columns(col_widths=[6, 6, 12]):\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Tips data\")\n\n        @render.data_frame\n        def table():\n            return render.DataGrid(filtered_data())\n\n    with ui.card(full_screen=True):\n        with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n            \"Total bill vs tip\"\n            with ui.popover(title=\"Add a color variable\", placement=\"top\"):\n                ICONS[\"gear\"]\n                ui.input_radio_buttons(\n                    \"scatter_color\",\n                    None,\n                    [\"none\", \"sex\", \"smoker\", \"day\", \"time\"],\n                    inline=True,\n                )\n\n        @render_plotly\n        def scatterplot():\n            color = input.scatter_color()\n            return px.scatter(\n                filtered_data(),\n                x=\"total_bill\",\n                y=\"tip\",\n                color=None if color == \"none\" else color,\n                # trendline=\"lowess\"\n            )\n\n    with ui.card(full_screen=True):\n        with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n            \"Tip percentages\"\n            with ui.popover(title=\"Add a color variable\"):\n                ICONS[\"gear\"]\n                ui.input_radio_buttons(\n                    \"tip_perc_y\",\n                    \"Split by:\",\n                    [\"sex\", \"smoker\", \"day\", \"time\"],\n                    selected=\"day\",\n                    inline=True,\n                )\n\n        @render_plotly\n        def tip_perc():\n            filtered_df = filtered_data()\n            filtered_df[\"percent\"] = filtered_df.tip / filtered_df.total_bill\n            yvar = input.tip_perc_y()\n\n            # Create a violin plot with Plotly\n            violin_figure = px.violin(\n                filtered_df,\n                y=\"percent\",\n                color=yvar,  # This will split the violin plot by the selected variable\n                box=True,  # Displays a box plot inside the violin\n                points=\"all\",  # Shows all points\n                hover_data=tips_df.columns,  # Adds all other data as hover information\n                title=\"Distribution of Tip Percentages by \" + yvar.capitalize(),\n            )\n\n            # Update layout for better readability\n            violin_figure.update_layout(\n                yaxis_title=\"Tip Percentage\",\n                legend_title=yvar.capitalize(),\n                legend=dict(\n                    orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1\n                ),\n            )\n            return violin_figure\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on filtered_data() will be updated when the data changes.\n\n# In this case, notice that many outputs depend on filtered_data().\n\n\n@reactive.calc\ndef filtered_data():\n\n    # Get the selected range from the input as a tuple (min, max)\n    selected_tuple = input.selected_range_total_bill()\n\n    # Use the between() method to filter the DataFrame\n    # The method returns a boolean Series with the same index as the original DataFrame\n    # Each row is:\n    #   True if the total bill is in the input.selected_range_total_bill()\n    #   False if the total bill is not\n    isTotalBillInRange = tips_df.total_bill.between(\n        selected_tuple[0], selected_tuple[1]\n    )\n\n    # Use the isin() method to filter the DataFrame\n    # The method returns a boolean Series with the same index as the original DataFrame\n    # Each row is:\n    #   True if the row is in the input.selected_species() list\n    #   False if the species is not\n    isInSelectedTime = tips_df.time.isin(input.selected_time_category())\n\n    # Use the boolean filter mask in square brackets to filter the DataFrame\n    # Return the filtered DataFrame when the function is triggered\n    # Filter masks can be combined with the & operator for AND and the | operator for OR\n    return tips_df[isTotalBillInRange & isInSelectedTime]\n\n\n@reactive.effect\n@reactive.event(input.reset_event)\ndef _():\n    ui.update_slider(\"selected_range_total_bill\", value=bill_range_tuple)\n\n    ui.update_checkbox_group(\"selected_time_category\", selected=[\"Lunch\", \"Dinner\"])\n\n\n# Additional Python Notes\n# ------------------------\n# Capitalization matters in Python. Python is case-sensitive: min and Min are different.\n# Spelling matters in Python. You must match the spelling of functions and variables exactly.\n# Indentation matters in Python. Indentation is used to define code blocks and must be consistent.\n\n# Functions\n# ---------\n# Functions are used to group code together and make it more readable and reusable.\n# We define custom functions that can be called later in the code.\n# Functions are blocks of logic that can take inputs, perform work, and return outputs.\n\n# Defining Functions\n# ------------------\n# Define a function using the def keyword, followed by the function name, parentheses, and a colon. \n# The function name should describe what the function does.\n# In the parentheses, specify the inputs needed as arguments the function takes.\n# For example:\n#    The function filtered_data() takes no arguments.\n#    The function between(min, max) takes two arguments, a minimum and maximum value.\n#    Arguments can be positional or keyword arguments, labeled with a parameter name.\n\n# The function body is indented (consistently!) after the colon. \n# Use the return keyword to return a value from a function.\n    \n# Calling Functions\n# -----------------\n# Call a function by using its name followed by parentheses and any required arguments.\n    \n# Decorators\n# ----------\n# Use the @ symbol to decorate a function with a decorator.\n# Decorators a concise way of calling a function on a function.\n# We don't typically write decorators, but we often use them.\n    ", "type": "text"}, {"name": "favicon.ico", "content": "", "type": "binary"}, {"name": "fetch.py", "content": "\"\"\"\nPurpose: Provide a simple async wrapper for http requests that works in both regular\nPython and Pyodide (on your machine and in the browser, respectively).\n\nSource: https://shinylive.io/py/examples/#fetch-data-from-a-web-api\nFile: download.py\n\"\"\"\n\nimport json\nfrom typing import Any, Literal\n\n\nclass HttpResponse:\n    def __init__(self, status: int, data: Any):\n        self.status = status\n        self.data = data\n\n\nasync def fetch_from_url(\n    url: str, type: Literal[\"string\", \"bytes\", \"json\"] = \"string\"\n) -> HttpResponse:\n    \"\"\"\n    An async wrapper function for http requests that works in both regular Python and\n    Pyodide.\n\n    In Pyodide, it uses the pyodide.http.pyfetch() function, which is a wrapper for the\n    JavaScript fetch() function. pyfetch() is asynchronous, so this whole function must\n    also be async.\n\n    In regular Python, it uses the urllib.request.urlopen() function.\n\n    Args:\n        url: The URL to download.\n\n        type: How to parse the content. If \"string\", it returns the response as a\n        string. If \"bytes\", it returns the response as a bytes object. If \"json\", it\n        parses the response as JSON, then converts it to a Python object, usually a\n        dictionary or list.\n\n    Returns:\n        A HttpResponse object\n    \"\"\"\n    import sys\n\n    if \"pyodide\" in sys.modules:\n        import pyodide.http\n\n        response = await pyodide.http.pyfetch(url)\n\n        if type == \"json\":\n            # .json() parses the response as JSON and converts to dictionary.\n            data = await response.json()\n        elif type == \"string\":\n            # .string() returns the response as a string.\n            data = await response.string()\n        elif type == \"bytes\":\n            # .bytes() returns the response as a byte object.\n            data = await response.bytes()\n\n        return HttpResponse(response.status, data)\n\n    else:\n        import urllib.request\n\n        response = urllib.request.urlopen(url)\n        if type == \"json\":\n            data = json.loads(response.read().decode(\"utf-8\"))\n        elif type == \"string\":\n            data = response.read().decode(\"utf-8\")\n        elif type == \"bytes\":\n            data = response.read()\n\n        return HttpResponse(response.status, data)\n", "type": "text"}]