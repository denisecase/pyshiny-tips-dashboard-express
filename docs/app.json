[{"name": "app.py", "content": "import faicons as fa\nimport pandas as pd # required for plotly.express\nimport plotly.express as px\nfrom shinywidgets import render_plotly\n\nfrom shiny import reactive, render, req\nfrom shiny.express import input, ui\n\n# Plotly's px.scatter function uses statsmodels for lowess trendlines under the hood.\n# import statsmodels.api as sm # required for total bill vs tip plotly.express charts\n\n\n# Load data and compute static values\ntips = px.data.tips()\nbill_rng = (min(tips.total_bill), max(tips.total_bill))\n\n# Add page title and sidebar\nui.page_opts(title=\"Restaurant tipping\", fillable=True)\nwith ui.sidebar(open=\"desktop\"):\n    ui.input_slider(\"total_bill\", \"Bill amount\", min=bill_rng[0], max=bill_rng[1], value=bill_rng, pre=\"$\")\n    ui.input_checkbox_group(\"time\", \"Food service\", [\"Lunch\", \"Dinner\"], selected=[\"Lunch\", \"Dinner\"], inline=True)\n    ui.input_action_button(\"reset\", \"Reset filter\")\n\n# Add main content\nICONS = {\n    \"user\": fa.icon_svg(\"user\", \"regular\"),\n    \"wallet\": fa.icon_svg(\"wallet\"),\n    \"currency-dollar\": fa.icon_svg(\"dollar-sign\"),\n    \"gear\": fa.icon_svg(\"gear\")\n}\n\nwith ui.layout_columns(fill=False):\n\n    with ui.value_box(showcase=ICONS[\"user\"]):\n        \"Total tippers\"\n        @render.express\n        def total_tippers():\n            tips_data().shape[0]\n\n    with ui.value_box(showcase=ICONS[\"wallet\"]):\n        \"Average tip\"\n        @render.express\n        def average_tip():\n            d = tips_data()\n            if d.shape[0] > 0:\n                perc = d.tip / d.total_bill\n                f\"{perc.mean():.1%}\"\n\n    with ui.value_box(showcase=ICONS[\"currency-dollar\"]):\n        \"Average bill\"\n        @render.express\n        def average_bill():\n            d = tips_data()\n            if d.shape[0] > 0:\n                bill = d.total_bill.mean()\n                f\"${bill:.2f}\"\n\n\nwith ui.layout_columns(col_widths=[6, 6, 12]):\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Tips data\")\n        @render.data_frame\n        def table():\n            return render.DataGrid(tips_data())\n\n    with ui.card(full_screen=True):\n        with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n            \"Total bill vs tip\"\n            with ui.popover(title=\"Add a color variable\", placement=\"top\"):\n                ICONS[\"gear\"]\n                ui.input_radio_buttons(\n                    \"scatter_color\", None,\n                    [\"none\", \"sex\", \"smoker\", \"day\", \"time\"],\n                    inline=True\n                )\n\n        @render_plotly\n        def scatterplot():\n            color = input.scatter_color()\n            return px.scatter(\n                tips_data(),\n                x=\"total_bill\",\n                y=\"tip\",\n                color=None if color == \"none\" else color,\n                # trendline=\"lowess\"\n            )\n\n    with ui.card(full_screen=True):\n        with ui.card_header(class_=\"d-flex justify-content-between align-items-center\"):\n            \"Tip percentages\"\n            with ui.popover(title=\"Add a color variable\"):\n                ICONS[\"gear\"]\n                ui.input_radio_buttons(\n                    \"tip_perc_y\", \"Split by:\",\n                    [\"sex\", \"smoker\", \"day\", \"time\"],\n                    selected=\"day\",\n                    inline=True\n                )\n\n        @render_plotly\n        def tip_perc():\n            dat = tips_data()\n            dat[\"percent\"] = dat.tip / dat.total_bill\n            yvar = input.tip_perc_y()\n         \n            # uvals = dat[yvar].unique()\n\n            # samples = [\n            #     [ dat.percent[dat[yvar] == val] ]\n            #     for val in uvals\n            # ]\n\n            # plt = ridgeplot(\n            #     from ridgeplot import ridgeplot\n            #     samples=samples, labels=uvals, bandwidth=0.01,\n            #     colorscale=\"viridis\", colormode=\"row-index\"\n            # )\n\n            # plt.update_layout(\n            #     legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"center\", x=0.5)\n            # )\n\n            # return plt\n        \n            # Create a violin plot with Plotly\n            fig = px.violin(\n                dat,\n                y=\"percent\",\n                color=yvar,  # This will split the violin plot by the selected variable\n                box=True,  # Displays a box plot inside the violin\n                points=\"all\",  # Shows all points\n                hover_data=tips.columns,  # Adds all other data as hover information\n                title=\"Distribution of Tip Percentages by \" + yvar.capitalize()\n            )\n    \n            # Update layout for better readability\n            fig.update_layout(\n                yaxis_title=\"Tip Percentage\",\n                legend_title=yvar.capitalize(),\n                legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n            )\n            return fig\n\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n@reactive.calc\ndef tips_data():\n    bill = input.total_bill()\n    idx1 = tips.total_bill.between(bill[0], bill[1])\n    idx2 = tips.time.isin(input.time())\n    return tips[idx1 & idx2]\n\n@reactive.effect\n@reactive.event(input.reset)\ndef _():\n    ui.update_slider(\"total_bill\", value=bill_rng)\n    ui.update_checkbox_group(\"time\", selected=[\"Lunch\", \"Dinner\"])\n", "type": "text"}]